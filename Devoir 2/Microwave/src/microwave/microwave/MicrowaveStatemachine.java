/** Generated by YAKINDU Statechart Tools code generator. */
package microwave.microwave;

import microwave.ITimer;

public class MicrowaveStatemachine implements IMicrowaveStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean high;
		
		
		public void raiseHigh() {
			high = true;
			runCycle();
		}
		
		private boolean low;
		
		
		public void raiseLow() {
			low = true;
			runCycle();
		}
		
		private boolean digit;
		
		private long digitValue;
		
		
		public void raiseDigit(final long value) {
			digitValue = value;
			digit = true;
			runCycle();
		}
		protected long getDigitValue() {
			if (! digit ) 
				throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
			return digitValue;
		}
		
		private boolean timer;
		
		
		public void raiseTimer() {
			timer = true;
			runCycle();
		}
		
		private boolean start;
		
		
		public void raiseStart() {
			start = true;
			runCycle();
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
			runCycle();
		}
		
		private boolean open;
		
		
		public void raiseOpen() {
			open = true;
			runCycle();
		}
		
		private boolean close;
		
		
		public void raiseClose() {
			close = true;
			runCycle();
		}
		
		private long power;
		
		public long getPower() {
			return power;
		}
		
		public void setPower(long value) {
			this.power = value;
		}
		
		protected void clearEvents() {
			high = false;
			low = false;
			digit = false;
			timer = false;
			start = false;
			stop = false;
			open = false;
			close = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		microwave_Idle,
		microwave_CookingProcess,
		microwave_CookingProcess_CookingStates_Finished,
		microwave_CookingProcess_CookingStates_Cooking,
		microwave_CookingProcess_CookingStates_PowerSelection,
		microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High,
		microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low,
		microwave_CookingProcess_CookingStates_TimeSelection,
		microwave_Waiting,
		$NullState$
	};
	
	private State[] historyVector = new State[2];
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private long maxDigits;
	
	protected long getMaxDigits() {
		return maxDigits;
	}
	
	protected void setMaxDigits(long value) {
		this.maxDigits = value;
	}
	
	
	private long t;
	
	protected long getT() {
		return t;
	}
	
	protected void setT(long value) {
		this.t = value;
	}
	
	
	public MicrowaveStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 2; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPower(0);
		
		setMaxDigits(0);
		
		setT(0);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Microwave_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case microwave_Idle:
				microwave_Idle_react(true);
				break;
			case microwave_CookingProcess_CookingStates_Finished:
				microwave_CookingProcess_CookingStates_Finished_react(true);
				break;
			case microwave_CookingProcess_CookingStates_Cooking:
				microwave_CookingProcess_CookingStates_Cooking_react(true);
				break;
			case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High:
				microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High_react(true);
				break;
			case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low:
				microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low_react(true);
				break;
			case microwave_CookingProcess_CookingStates_TimeSelection:
				microwave_CookingProcess_CookingStates_TimeSelection_react(true);
				break;
			case microwave_Waiting:
				microwave_Waiting_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_Microwave();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case microwave_Idle:
			return stateVector[0] == State.microwave_Idle;
		case microwave_CookingProcess:
			return stateVector[0].ordinal() >= State.
					microwave_CookingProcess.ordinal()&& stateVector[0].ordinal() <= State.microwave_CookingProcess_CookingStates_TimeSelection.ordinal();
		case microwave_CookingProcess_CookingStates_Finished:
			return stateVector[0] == State.microwave_CookingProcess_CookingStates_Finished;
		case microwave_CookingProcess_CookingStates_Cooking:
			return stateVector[0] == State.microwave_CookingProcess_CookingStates_Cooking;
		case microwave_CookingProcess_CookingStates_PowerSelection:
			return stateVector[0].ordinal() >= State.
					microwave_CookingProcess_CookingStates_PowerSelection.ordinal()&& stateVector[0].ordinal() <= State.microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low.ordinal();
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High:
			return stateVector[0] == State.microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low:
			return stateVector[0] == State.microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low;
		case microwave_CookingProcess_CookingStates_TimeSelection:
			return stateVector[0] == State.microwave_CookingProcess_CookingStates_TimeSelection;
		case microwave_Waiting:
			return stateVector[0] == State.microwave_Waiting;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseHigh() {
		sCInterface.raiseHigh();
	}
	
	public void raiseLow() {
		sCInterface.raiseLow();
	}
	
	public void raiseDigit(long value) {
		sCInterface.raiseDigit(value);
	}
	
	public void raiseTimer() {
		sCInterface.raiseTimer();
	}
	
	public void raiseStart() {
		sCInterface.raiseStart();
	}
	
	public void raiseStop() {
		sCInterface.raiseStop();
	}
	
	public void raiseOpen() {
		sCInterface.raiseOpen();
	}
	
	public void raiseClose() {
		sCInterface.raiseClose();
	}
	
	public long getPower() {
		return sCInterface.getPower();
	}
	
	public void setPower(long value) {
		sCInterface.setPower(value);
	}
	
	/* Entry action for state 'Idle'. */
	private void entryAction_Microwave_Idle() {
		sCInterface.operationCallback.clearDisplay();
	}
	
	/* Entry action for state 'Finished'. */
	private void entryAction_Microwave_CookingProcess_CookingStates_Finished() {
		timer.setTimer(this, 0, (5 * 1000), false);
		
		sCInterface.operationCallback.display("Finished");
		
		sCInterface.operationCallback.beepOn();
	}
	
	/* Entry action for state 'Cooking'. */
	private void entryAction_Microwave_CookingProcess_CookingStates_Cooking() {
		timer.setTimer(this, 1, (getT() * 1000), false);
		
		sCInterface.operationCallback.cook();
		
		sCInterface.operationCallback.displayTime(getT());
	}
	
	/* Entry action for state 'High'. */
	private void entryAction_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High() {
		sCInterface.operationCallback.display("High");
		
		sCInterface.setPower(1);
	}
	
	/* Entry action for state 'Low'. */
	private void entryAction_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low() {
		sCInterface.operationCallback.display("Low");
		
		sCInterface.setPower(2);
	}
	
	/* Entry action for state 'TimeSelection'. */
	private void entryAction_Microwave_CookingProcess_CookingStates_TimeSelection() {
		setMaxDigits(4);
		
		setT(((t * 10) + sCInterface.getDigitValue()));
	}
	
	/* Entry action for state 'Waiting'. */
	private void entryAction_Microwave_Waiting() {
		sCInterface.operationCallback.display("Waiting");
	}
	
	/* Exit action for state 'Finished'. */
	private void exitAction_Microwave_CookingProcess_CookingStates_Finished() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Cooking'. */
	private void exitAction_Microwave_CookingProcess_CookingStates_Cooking() {
		timer.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Idle */
	private void enterSequence_Microwave_Idle_default() {
		entryAction_Microwave_Idle();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Idle;
	}
	
	/* 'default' enter sequence for state CookingProcess */
	private void enterSequence_Microwave_CookingProcess_default() {
		enterSequence_Microwave_CookingProcess_CookingStates_default();
	}
	
	/* 'default' enter sequence for state Finished */
	private void enterSequence_Microwave_CookingProcess_CookingStates_Finished_default() {
		entryAction_Microwave_CookingProcess_CookingStates_Finished();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_CookingProcess_CookingStates_Finished;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Cooking */
	private void enterSequence_Microwave_CookingProcess_CookingStates_Cooking_default() {
		entryAction_Microwave_CookingProcess_CookingStates_Cooking();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_CookingProcess_CookingStates_Cooking;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state PowerSelection */
	private void enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_default() {
		enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state High */
	private void enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High_default() {
		entryAction_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Low */
	private void enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low_default() {
		entryAction_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state TimeSelection */
	private void enterSequence_Microwave_CookingProcess_CookingStates_TimeSelection_default() {
		entryAction_Microwave_CookingProcess_CookingStates_TimeSelection();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_CookingProcess_CookingStates_TimeSelection;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Waiting */
	private void enterSequence_Microwave_Waiting_default() {
		entryAction_Microwave_Waiting();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Waiting;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* 'default' enter sequence for region CookingStates */
	private void enterSequence_Microwave_CookingProcess_CookingStates_default() {
		react_Microwave_CookingProcess_CookingStates__entry_Default();
	}
	
	/* deep enterSequence with history in child CookingStates */
	private void deepEnterSequence_Microwave_CookingProcess_CookingStates() {
		switch (historyVector[0]) {
		case microwave_CookingProcess_CookingStates_Finished:
			enterSequence_Microwave_CookingProcess_CookingStates_Finished_default();
			break;
		case microwave_CookingProcess_CookingStates_Cooking:
			enterSequence_Microwave_CookingProcess_CookingStates_Cooking_default();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High:
			deepEnterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low:
			deepEnterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel();
			break;
		case microwave_CookingProcess_CookingStates_TimeSelection:
			enterSequence_Microwave_CookingProcess_CookingStates_TimeSelection_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region PowerLevel */
	private void enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_default() {
		react_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel__entry_Default();
	}
	
	/* deep enterSequence with history in child PowerLevel */
	private void deepEnterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel() {
		switch (historyVector[1]) {
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High:
			enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High_default();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low:
			enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state Idle */
	private void exitSequence_Microwave_Idle() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state CookingProcess */
	private void exitSequence_Microwave_CookingProcess() {
		exitSequence_Microwave_CookingProcess_CookingStates();
	}
	
	/* Default exit sequence for state Finished */
	private void exitSequence_Microwave_CookingProcess_CookingStates_Finished() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_CookingProcess_CookingStates_Finished();
	}
	
	/* Default exit sequence for state Cooking */
	private void exitSequence_Microwave_CookingProcess_CookingStates_Cooking() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_CookingProcess_CookingStates_Cooking();
	}
	
	/* Default exit sequence for state PowerSelection */
	private void exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection() {
		exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel();
	}
	
	/* Default exit sequence for state High */
	private void exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Low */
	private void exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state TimeSelection */
	private void exitSequence_Microwave_CookingProcess_CookingStates_TimeSelection() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting */
	private void exitSequence_Microwave_Waiting() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case microwave_Idle:
			exitSequence_Microwave_Idle();
			break;
		case microwave_CookingProcess_CookingStates_Finished:
			exitSequence_Microwave_CookingProcess_CookingStates_Finished();
			break;
		case microwave_CookingProcess_CookingStates_Cooking:
			exitSequence_Microwave_CookingProcess_CookingStates_Cooking();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High:
			exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low:
			exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low();
			break;
		case microwave_CookingProcess_CookingStates_TimeSelection:
			exitSequence_Microwave_CookingProcess_CookingStates_TimeSelection();
			break;
		case microwave_Waiting:
			exitSequence_Microwave_Waiting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region CookingStates */
	private void exitSequence_Microwave_CookingProcess_CookingStates() {
		switch (stateVector[0]) {
		case microwave_CookingProcess_CookingStates_Finished:
			exitSequence_Microwave_CookingProcess_CookingStates_Finished();
			break;
		case microwave_CookingProcess_CookingStates_Cooking:
			exitSequence_Microwave_CookingProcess_CookingStates_Cooking();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High:
			exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low:
			exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low();
			break;
		case microwave_CookingProcess_CookingStates_TimeSelection:
			exitSequence_Microwave_CookingProcess_CookingStates_TimeSelection();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region PowerLevel */
	private void exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel() {
		switch (stateVector[0]) {
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High:
			exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High();
			break;
		case microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low:
			exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_Idle_default();
	}
	
	/* Default react sequence for deep history entry history */
	private void react_Microwave_CookingProcess_CookingStates_history() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NullState$) {
			deepEnterSequence_Microwave_CookingProcess_CookingStates();
		} else {
			enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel__entry_Default() {
		enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_CookingProcess_CookingStates__entry_Default() {
		enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean microwave_Idle_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Idle();
					enterSequence_Microwave_CookingProcess_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_CookingProcess_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.open) {
					exitSequence_Microwave_CookingProcess();
					sCInterface.operationCallback.openDoor();
					
					enterSequence_Microwave_Waiting_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_CookingProcess_CookingStates_Finished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_CookingProcess_react(try_transition)==false) {
				if (timeEvents[0]) {
					exitSequence_Microwave_CookingProcess();
					sCInterface.operationCallback.beepOff();
					
					enterSequence_Microwave_Idle_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_CookingProcess_CookingStates_Cooking_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_CookingProcess_react(try_transition)==false) {
				if (timeEvents[1]) {
					exitSequence_Microwave_CookingProcess_CookingStates_Cooking();
					enterSequence_Microwave_CookingProcess_CookingStates_Finished_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_CookingProcess_CookingStates_PowerSelection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_CookingProcess_react(try_transition)==false) {
				if (sCInterface.timer) {
					exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection();
					setT(0);
					
					enterSequence_Microwave_CookingProcess_CookingStates_TimeSelection_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_CookingProcess_CookingStates_PowerSelection_react(try_transition)==false) {
				if (sCInterface.low) {
					exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High();
					enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_CookingProcess_CookingStates_PowerSelection_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_Low();
					enterSequence_Microwave_CookingProcess_CookingStates_PowerSelection_PowerLevel_High_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_CookingProcess_CookingStates_TimeSelection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_CookingProcess_react(try_transition)==false) {
				if (((sCInterface.digit) && (getMaxDigits()>0))) {
					exitSequence_Microwave_CookingProcess_CookingStates_TimeSelection();
					setMaxDigits(maxDigits--);
					
					enterSequence_Microwave_CookingProcess_CookingStates_TimeSelection_default();
				} else {
					if (sCInterface.start) {
						exitSequence_Microwave_CookingProcess_CookingStates_TimeSelection();
						enterSequence_Microwave_CookingProcess_CookingStates_Cooking_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Waiting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_Waiting();
					sCInterface.operationCallback.closeDoor();
					
					react_Microwave_CookingProcess_CookingStates_history();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
